SVHN Image Classifier
Overview
This project implements a convolutional neural network (CNN) to classify real-world images of digits from the Street View House Numbers (SVHN) dataset. The model is built, trained, tested, validated, and saved using TensorFlow.
Dataset
The SVHN dataset contains over 600,000 labeled digits cropped from street-level photos. It's similar to MNIST but presents more challenges as it features:
* Real-world images with varying lighting conditions
* Distractors and overlapping digits
* Different scales and orientations
* Color images (3 channels)
Project Structure
* Data loading and preprocessing
* Exploratory data analysis and visualization
* Model architecture design
* Training with validation
* Performance evaluation and metrics
* Model persistence
Requirements
The project requires the following dependencies:
tensorflow
numpy
matplotlib
scikit-learn
scipy
shap




Data Preprocessing
* Image normalization
* Reshaping and dimension transformation
* One-hot encoding of labels
* Grayscale conversion for comparison
* Train/validation/test splitting
Model Architecture
The CNN architecture features:
* Convolutional layers for feature extraction
* MaxPooling layers for dimensionality reduction
* Batch normalization for training stability
* Dropout layers to prevent overfitting
* Dense layers for classification
Training
The model is trained with:
* ModelCheckpoint to save the best performing model
* EarlyStopping to prevent overfitting
* Optimization using Adam optimizer
* Categorical cross-entropy loss function
Evaluation Metrics
Performance is evaluated using:
* Accuracy, precision, recall, and F1 score
* Confusion matrix visualization
* ROC curves and AUC
* Classification reports
Model Interpretability
SHAP (SHapley Additive exPlanations) is used to interpret model predictions and understand which features contribute most to classification decisions.
Usage
1. Load and preprocess the SVHN dataset
2. Train the CNN model
3. Evaluate performance on test data
4. Use the trained model for digit classification in new images
Future Improvements
* Data augmentation for improved generalization
* Hyperparameter tuning
* Transfer learning using pre-trained models
* Ensemble methods for higher accuracy
References
* SVHN Dataset
* TensorFlow Documentation
* SHAP Library